{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thech\\\\Documents\\\\Summer 2022\\\\Headstart\\\\GroupCollab\\\\client\\\\src\\\\App.js\";\n// import { useRef, useState } from \"react\";\n// import firebase from \"firebase/compat/app\";\n// import \"firebase/compat/firestore\";\n// import { ReactComponent as HangupIcon } from \"./icons/hangup.svg\";\n// import { ReactComponent as MoreIcon } from \"./icons/more-vertical.svg\";\n// import { ReactComponent as CopyIcon } from \"./icons/copy.svg\";\n// import \"./App.css\";\n// // Initialize Firebase\n// const firebaseConfig = {\n//   apiKey: \"AIzaSyB0Px6dHZzp8U2PiqSME8vIBG9Zr69gtnQ\",\n//   authDomain: \"gcollab-109ba.firebaseapp.com\",\n//   projectId: \"gcollab-109ba\",\n//   storageBucket: \"gcollab-109ba.appspot.com\",\n//   messagingSenderId: \"871201771773\",\n//   appId: \"1:871201771773:web:63dd9d5b0307b66e4a2e94\",\n//   measurementId: \"G-Y1QGH1C4TS\",\n// };\n// if (!firebase.apps.length) {\n//   firebase.initializeApp(firebaseConfig);\n// }\n// const firestore = firebase.firestore();\n// // Initialize WebRTC\n// const servers = {\n//   iceServers: [\n//     {\n//       urls: [\"stun:stun1.l.google.com:19302\", \"stun:stun2.l.google.com:19302\"],\n//     },\n//   ],\n//   iceCandidatePoolSize: 10,\n// };\n// const pc = new RTCPeerConnection(servers);\n// function App() {\n//   const [currentPage, setCurrentPage] = useState(\"home\");\n//   const [joinCode, setJoinCode] = useState(\"\");\n//   return (\n//     <div className=\"app\">\n//       aaa aa\n//       {currentPage === \"home\" ? (\n//         <Menu\n//           joinCode={joinCode}\n//           setJoinCode={setJoinCode}\n//           setPage={setCurrentPage}\n//         />\n//       ) : (\n//         <Videos mode={currentPage} callId={joinCode} setPage={setCurrentPage} />\n//       )}\n//     </div>\n//   );\n// }\n// function Menu({ joinCode, setJoinCode, setPage }) {\n//   return (\n//     <div className=\"home\">\n//       <div className=\"create box\">\n//         <button onClick={() => setPage(\"create\")}>Create Call</button>\n//       </div>\n//       <div className=\"answer box\">\n//         <input\n//           value={joinCode}\n//           onChange={(e) => setJoinCode(e.target.value)}\n//           placeholder=\"Join with code\"\n//         />\n//         <button onClick={() => setPage(\"join\")}>Answer</button>\n//       </div>\n//     </div>\n//   );\n// }\n// function Videos({ mode, callId, setPage }) {\n//   const [webcamActive, setWebcamActive] = useState(false);\n//   const [roomId, setRoomId] = useState(callId);\n//   const localRef = useRef();\n//   const remoteRef = useRef();\n//   const setupSources = async () => {\n//     const localStream = await navigator.mediaDevices.getUserMedia({\n//       video: true,\n//       audio: true,\n//     });\n//     const remoteStream = new MediaStream();\n//     localStream.getTracks().forEach((track) => {\n//       pc.addTrack(track, localStream);\n//     });\n//     pc.ontrack = (event) => {\n//       event.streams[0].getTracks().forEach((track) => {\n//         remoteStream.addTrack(track);\n//       });\n//     };\n//     localRef.current.srcObject = localStream;\n//     remoteRef.current.srcObject = remoteStream;\n//     setWebcamActive(true);\n//     if (mode === \"create\") {\n//       const callDoc = firestore.collection(\"calls\").doc();\n//       const offerCandidates = callDoc.collection(\"offerCandidates\");\n//       const answerCandidates = callDoc.collection(\"answerCandidates\");\n//       setRoomId(callDoc.id);\n//       pc.onicecandidate = (event) => {\n//         event.candidate && offerCandidates.add(event.candidate.toJSON());\n//       };\n//       const offerDescription = await pc.createOffer();\n//       await pc.setLocalDescription(offerDescription);\n//       const offer = {\n//         sdp: offerDescription.sdp,\n//         type: offerDescription.type,\n//       };\n//       await callDoc.set({ offer });\n//       callDoc.onSnapshot((snapshot) => {\n//         const data = snapshot.data();\n//         if (!pc.currentRemoteDescription && data?.answer) {\n//           const answerDescription = new RTCSessionDescription(data.answer);\n//           pc.setRemoteDescription(answerDescription);\n//         }\n//       });\n//       answerCandidates.onSnapshot((snapshot) => {\n//         snapshot.docChanges().forEach((change) => {\n//           if (change.type === \"added\") {\n//             const candidate = new RTCIceCandidate(change.doc.data());\n//             pc.addIceCandidate(candidate);\n//           }\n//         });\n//       });\n//     } else if (mode === \"join\") {\n//       const callDoc = firestore.collection(\"calls\").doc(callId);\n//       const answerCandidates = callDoc.collection(\"answerCandidates\");\n//       const offerCandidates = callDoc.collection(\"offerCandidates\");\n//       pc.onicecandidate = (event) => {\n//         event.candidate && answerCandidates.add(event.candidate.toJSON());\n//       };\n//       const callData = (await callDoc.get()).data();\n//       const offerDescription = callData.offer;\n//       await pc.setRemoteDescription(\n//         new RTCSessionDescription(offerDescription)\n//       );\n//       const answerDescription = await pc.createAnswer();\n//       await pc.setLocalDescription(answerDescription);\n//       const answer = {\n//         type: answerDescription.type,\n//         sdp: answerDescription.sdp,\n//       };\n//       await callDoc.update({ answer });\n//       offerCandidates.onSnapshot((snapshot) => {\n//         snapshot.docChanges().forEach((change) => {\n//           if (change.type === \"added\") {\n//             let data = change.doc.data();\n//             pc.addIceCandidate(new RTCIceCandidate(data));\n//           }\n//         });\n//       });\n//     }\n//     pc.onconnectionstatechange = (event) => {\n//       if (pc.connectionState === \"disconnected\") {\n//         hangUp();\n//       }\n//     };\n//   };\n//   const hangUp = async () => {\n//     pc.close();\n//     if (roomId) {\n//       let roomRef = firestore.collection(\"calls\").doc(roomId);\n//       await roomRef\n//         .collection(\"answerCandidates\")\n//         .get()\n//         .then((querySnapshot) => {\n//           querySnapshot.forEach((doc) => {\n//             doc.ref.delete();\n//           });\n//         });\n//       await roomRef\n//         .collection(\"offerCandidates\")\n//         .get()\n//         .then((querySnapshot) => {\n//           querySnapshot.forEach((doc) => {\n//             doc.ref.delete();\n//           });\n//         });\n//       await roomRef.delete();\n//     }\n//     window.location.reload();\n//   };\n//   return (\n//     <div className=\"videos\">\n//       <video ref={localRef} autoPlay playsInline className=\"local\" muted />\n//       <video ref={remoteRef} autoPlay playsInline className=\"remote\" />\n//       <div className=\"buttonsContainer\">\n//         <button\n//           onClick={hangUp}\n//           disabled={!webcamActive}\n//           className=\"hangup button\"\n//         >\n//           <HangupIcon />\n//         </button>\n//         <div tabIndex={0} role=\"button\" className=\"more button\">\n//           {roomId}\n//           <MoreIcon />\n//           <div className=\"popover\">\n//             <button\n//               onClick={() => {\n//                 navigator.clipboard.writeText(roomId);\n//               }}\n//             >\n//               <CopyIcon /> Copy joining code\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//       {!webcamActive && (\n//         <div className=\"modalContainer\">\n//           <div className=\"modal\">\n//             <h3>Turn on your camera and microphone and start the call</h3>\n//             <div className=\"container\">\n//               <button onClick={() => setPage(\"home\")} className=\"secondary\">\n//                 Cancel\n//               </button>\n//               <button onClick={setupSources}>Start</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n// export default App;\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Videochat from \"./component/VideoChat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Videochat, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 271,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","Videochat","App"],"sources":["C:/Users/thech/Documents/Summer 2022/Headstart/GroupCollab/client/src/App.js"],"sourcesContent":["// import { useRef, useState } from \"react\";\r\n\r\n// import firebase from \"firebase/compat/app\";\r\n// import \"firebase/compat/firestore\";\r\n\r\n// import { ReactComponent as HangupIcon } from \"./icons/hangup.svg\";\r\n// import { ReactComponent as MoreIcon } from \"./icons/more-vertical.svg\";\r\n// import { ReactComponent as CopyIcon } from \"./icons/copy.svg\";\r\n\r\n// import \"./App.css\";\r\n\r\n// // Initialize Firebase\r\n\r\n// const firebaseConfig = {\r\n//   apiKey: \"AIzaSyB0Px6dHZzp8U2PiqSME8vIBG9Zr69gtnQ\",\r\n//   authDomain: \"gcollab-109ba.firebaseapp.com\",\r\n//   projectId: \"gcollab-109ba\",\r\n//   storageBucket: \"gcollab-109ba.appspot.com\",\r\n//   messagingSenderId: \"871201771773\",\r\n//   appId: \"1:871201771773:web:63dd9d5b0307b66e4a2e94\",\r\n//   measurementId: \"G-Y1QGH1C4TS\",\r\n// };\r\n\r\n// if (!firebase.apps.length) {\r\n//   firebase.initializeApp(firebaseConfig);\r\n// }\r\n\r\n// const firestore = firebase.firestore();\r\n\r\n// // Initialize WebRTC\r\n// const servers = {\r\n//   iceServers: [\r\n//     {\r\n//       urls: [\"stun:stun1.l.google.com:19302\", \"stun:stun2.l.google.com:19302\"],\r\n//     },\r\n//   ],\r\n//   iceCandidatePoolSize: 10,\r\n// };\r\n\r\n// const pc = new RTCPeerConnection(servers);\r\n\r\n// function App() {\r\n//   const [currentPage, setCurrentPage] = useState(\"home\");\r\n//   const [joinCode, setJoinCode] = useState(\"\");\r\n\r\n//   return (\r\n//     <div className=\"app\">\r\n//       aaa aa\r\n//       {currentPage === \"home\" ? (\r\n//         <Menu\r\n//           joinCode={joinCode}\r\n//           setJoinCode={setJoinCode}\r\n//           setPage={setCurrentPage}\r\n//         />\r\n//       ) : (\r\n//         <Videos mode={currentPage} callId={joinCode} setPage={setCurrentPage} />\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// function Menu({ joinCode, setJoinCode, setPage }) {\r\n//   return (\r\n//     <div className=\"home\">\r\n//       <div className=\"create box\">\r\n//         <button onClick={() => setPage(\"create\")}>Create Call</button>\r\n//       </div>\r\n\r\n//       <div className=\"answer box\">\r\n//         <input\r\n//           value={joinCode}\r\n//           onChange={(e) => setJoinCode(e.target.value)}\r\n//           placeholder=\"Join with code\"\r\n//         />\r\n//         <button onClick={() => setPage(\"join\")}>Answer</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// function Videos({ mode, callId, setPage }) {\r\n//   const [webcamActive, setWebcamActive] = useState(false);\r\n//   const [roomId, setRoomId] = useState(callId);\r\n\r\n//   const localRef = useRef();\r\n//   const remoteRef = useRef();\r\n\r\n//   const setupSources = async () => {\r\n//     const localStream = await navigator.mediaDevices.getUserMedia({\r\n//       video: true,\r\n//       audio: true,\r\n//     });\r\n//     const remoteStream = new MediaStream();\r\n\r\n//     localStream.getTracks().forEach((track) => {\r\n//       pc.addTrack(track, localStream);\r\n//     });\r\n\r\n//     pc.ontrack = (event) => {\r\n//       event.streams[0].getTracks().forEach((track) => {\r\n//         remoteStream.addTrack(track);\r\n//       });\r\n//     };\r\n\r\n//     localRef.current.srcObject = localStream;\r\n//     remoteRef.current.srcObject = remoteStream;\r\n\r\n//     setWebcamActive(true);\r\n\r\n//     if (mode === \"create\") {\r\n//       const callDoc = firestore.collection(\"calls\").doc();\r\n//       const offerCandidates = callDoc.collection(\"offerCandidates\");\r\n//       const answerCandidates = callDoc.collection(\"answerCandidates\");\r\n\r\n//       setRoomId(callDoc.id);\r\n\r\n//       pc.onicecandidate = (event) => {\r\n//         event.candidate && offerCandidates.add(event.candidate.toJSON());\r\n//       };\r\n\r\n//       const offerDescription = await pc.createOffer();\r\n//       await pc.setLocalDescription(offerDescription);\r\n\r\n//       const offer = {\r\n//         sdp: offerDescription.sdp,\r\n//         type: offerDescription.type,\r\n//       };\r\n\r\n//       await callDoc.set({ offer });\r\n\r\n//       callDoc.onSnapshot((snapshot) => {\r\n//         const data = snapshot.data();\r\n//         if (!pc.currentRemoteDescription && data?.answer) {\r\n//           const answerDescription = new RTCSessionDescription(data.answer);\r\n//           pc.setRemoteDescription(answerDescription);\r\n//         }\r\n//       });\r\n\r\n//       answerCandidates.onSnapshot((snapshot) => {\r\n//         snapshot.docChanges().forEach((change) => {\r\n//           if (change.type === \"added\") {\r\n//             const candidate = new RTCIceCandidate(change.doc.data());\r\n//             pc.addIceCandidate(candidate);\r\n//           }\r\n//         });\r\n//       });\r\n//     } else if (mode === \"join\") {\r\n//       const callDoc = firestore.collection(\"calls\").doc(callId);\r\n//       const answerCandidates = callDoc.collection(\"answerCandidates\");\r\n//       const offerCandidates = callDoc.collection(\"offerCandidates\");\r\n\r\n//       pc.onicecandidate = (event) => {\r\n//         event.candidate && answerCandidates.add(event.candidate.toJSON());\r\n//       };\r\n\r\n//       const callData = (await callDoc.get()).data();\r\n\r\n//       const offerDescription = callData.offer;\r\n//       await pc.setRemoteDescription(\r\n//         new RTCSessionDescription(offerDescription)\r\n//       );\r\n\r\n//       const answerDescription = await pc.createAnswer();\r\n//       await pc.setLocalDescription(answerDescription);\r\n\r\n//       const answer = {\r\n//         type: answerDescription.type,\r\n//         sdp: answerDescription.sdp,\r\n//       };\r\n\r\n//       await callDoc.update({ answer });\r\n\r\n//       offerCandidates.onSnapshot((snapshot) => {\r\n//         snapshot.docChanges().forEach((change) => {\r\n//           if (change.type === \"added\") {\r\n//             let data = change.doc.data();\r\n//             pc.addIceCandidate(new RTCIceCandidate(data));\r\n//           }\r\n//         });\r\n//       });\r\n//     }\r\n\r\n//     pc.onconnectionstatechange = (event) => {\r\n//       if (pc.connectionState === \"disconnected\") {\r\n//         hangUp();\r\n//       }\r\n//     };\r\n//   };\r\n\r\n//   const hangUp = async () => {\r\n//     pc.close();\r\n\r\n//     if (roomId) {\r\n//       let roomRef = firestore.collection(\"calls\").doc(roomId);\r\n//       await roomRef\r\n//         .collection(\"answerCandidates\")\r\n//         .get()\r\n//         .then((querySnapshot) => {\r\n//           querySnapshot.forEach((doc) => {\r\n//             doc.ref.delete();\r\n//           });\r\n//         });\r\n//       await roomRef\r\n//         .collection(\"offerCandidates\")\r\n//         .get()\r\n//         .then((querySnapshot) => {\r\n//           querySnapshot.forEach((doc) => {\r\n//             doc.ref.delete();\r\n//           });\r\n//         });\r\n\r\n//       await roomRef.delete();\r\n//     }\r\n\r\n//     window.location.reload();\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"videos\">\r\n//       <video ref={localRef} autoPlay playsInline className=\"local\" muted />\r\n//       <video ref={remoteRef} autoPlay playsInline className=\"remote\" />\r\n\r\n//       <div className=\"buttonsContainer\">\r\n//         <button\r\n//           onClick={hangUp}\r\n//           disabled={!webcamActive}\r\n//           className=\"hangup button\"\r\n//         >\r\n//           <HangupIcon />\r\n//         </button>\r\n//         <div tabIndex={0} role=\"button\" className=\"more button\">\r\n//           {roomId}\r\n//           <MoreIcon />\r\n//           <div className=\"popover\">\r\n//             <button\r\n//               onClick={() => {\r\n//                 navigator.clipboard.writeText(roomId);\r\n//               }}\r\n//             >\r\n//               <CopyIcon /> Copy joining code\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {!webcamActive && (\r\n//         <div className=\"modalContainer\">\r\n//           <div className=\"modal\">\r\n//             <h3>Turn on your camera and microphone and start the call</h3>\r\n//             <div className=\"container\">\r\n//               <button onClick={() => setPage(\"home\")} className=\"secondary\">\r\n//                 Cancel\r\n//               </button>\r\n//               <button onClick={setupSources}>Start</button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Videochat from \"./component/VideoChat\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Videochat></Videochat>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappingsiB,YAAjB;AACA,OAAO,WAAP;AACA,OAAOC,SAAP,MAAsB,uBAAtB;;;AAEA,SAASC,GAAT,GAAe;EACb,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,uBACE,QAAC,SAAD;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAKD;;KANQA,G;AAQT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}